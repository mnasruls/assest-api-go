// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/muhammadnasrul/playground/tech-test/asset_findr/assets-api-go/internal/repositories/asset_repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	dto "assets-api-go/internal/dto"
	models "assets-api-go/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAssetRepositoryInterface is a mock of AssetRepositoryInterface interface.
type MockAssetRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetRepositoryInterfaceMockRecorder
}

// MockAssetRepositoryInterfaceMockRecorder is the mock recorder for MockAssetRepositoryInterface.
type MockAssetRepositoryInterfaceMockRecorder struct {
	mock *MockAssetRepositoryInterface
}

// NewMockAssetRepositoryInterface creates a new mock instance.
func NewMockAssetRepositoryInterface(ctrl *gomock.Controller) *MockAssetRepositoryInterface {
	mock := &MockAssetRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAssetRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetRepositoryInterface) EXPECT() *MockAssetRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CommitTransaction mocks base method.
func (m *MockAssetRepositoryInterface) CommitTransaction(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockAssetRepositoryInterfaceMockRecorder) CommitTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).CommitTransaction), arg0)
}

// CreateAsset mocks base method.
func (m *MockAssetRepositoryInterface) CreateAsset(asset *models.Asset, tx *gorm.DB) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", asset, tx)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockAssetRepositoryInterfaceMockRecorder) CreateAsset(asset, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).CreateAsset), asset, tx)
}

// DeleteAsset mocks base method.
func (m *MockAssetRepositoryInterface) DeleteAsset(asset *models.Asset, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", asset, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockAssetRepositoryInterfaceMockRecorder) DeleteAsset(asset, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).DeleteAsset), asset, tx)
}

// GetAssetByAttribute mocks base method.
func (m *MockAssetRepositoryInterface) GetAssetByAttribute(whereClause interface{}) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetByAttribute", whereClause)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetByAttribute indicates an expected call of GetAssetByAttribute.
func (mr *MockAssetRepositoryInterfaceMockRecorder) GetAssetByAttribute(whereClause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetByAttribute", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).GetAssetByAttribute), whereClause)
}

// GetAssets mocks base method.
func (m *MockAssetRepositoryInterface) GetAssets(pagination *dto.MetaPagination) ([]*models.Asset, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", pagination)
	ret0, _ := ret[0].([]*models.Asset)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockAssetRepositoryInterfaceMockRecorder) GetAssets(pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).GetAssets), pagination)
}

// RollbackTransaction mocks base method.
func (m *MockAssetRepositoryInterface) RollbackTransaction(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockAssetRepositoryInterfaceMockRecorder) RollbackTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).RollbackTransaction), arg0)
}

// StartTransaction mocks base method.
func (m *MockAssetRepositoryInterface) StartTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockAssetRepositoryInterfaceMockRecorder) StartTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).StartTransaction))
}

// UpdateAsset mocks base method.
func (m *MockAssetRepositoryInterface) UpdateAsset(asset *models.Asset, tx *gorm.DB) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", asset, tx)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockAssetRepositoryInterfaceMockRecorder) UpdateAsset(asset, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).UpdateAsset), asset, tx)
}
